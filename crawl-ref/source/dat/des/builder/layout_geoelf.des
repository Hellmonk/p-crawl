###############################################################################
# layout_geoelf.des: Layouts for Tower with geometric rooms
#                    These are not the only Tower layouts
#                    These layouts will build around primary vaults correctly.
###############################################################################

# Required file contains overview
: crawl_require("dlua/layout/geoelf.lua")

##############################################################
# layout_geoelf_grid
#
# A grid of rooms, inspired by layout_roguey.  There are no
#  missing rooms because they mess up the corridors between
#  rooms and can disconnect the map (or connect it through a
#  primary vault and have the connection be overwritten).
#
# These 3 layouts could be combined into 1 big layout, but it
# would be as long as the three combined, so it would just make
# them harder to read.
#
#  O-O-O-O-O
#  |X|X|X|X|      O-O-O-O
#  O-O-O-O-O      |X|X|X|
#  |X|X|X|X|      O-O-O-O
#  O-O-O-O-O      |X|X|X|
#  |X|X|X|X|  OR  O-O-O-O
#  O-O-O-O-O      |X|X|X|
#  |X|X|X|X|      O-O-O-O
#  O-O-O-O-O      |X|X|X|
#  |X|X|X|X|      O-O-O-O
#  O-O-O-O-O      16 Rooms
#   25 Rooms
#
NAME:   layout_geoelf_grid
DEPTH:  Tower
WEIGHT: 10
ORIENT: encompass
TAGS:   overwritable layout allow_dup unrand layout_type_rooms
TAGS:   no_rotate no_vmirror no_hmirror
{{
  local gxm, gym = dgn.large_builder_bounds()
  extend_map{width = gxm, height = gym, fill = 'x'}

  local depth_fraction = you.depth_fraction()

  -- some parameters
  local rooms_across = 4
  local room_spacing = 11
  local offset_max = 1
  local radius_min = math.floor(2 + depth_fraction + crawl.random_real())
  local radius_max = math.floor(4 + depth_fraction + crawl.random_real())
  local extra_corridor_fraction = 0.7 - depth_fraction * 0.2
  local fancy_room_fraction = 0.1 + depth_fraction * 0.1

  -- create the arrays
  local room_data         = { count = 0 }
  local corridor_data     = { count = 0 }
  local rooms_by_position = {}

  -- choose the room positions
  for y = 0, rooms_across - 1 do
    rooms_by_position[y] = {}
    for x = 0, rooms_across - 1 do
      local x_pos = gxm / 2 +
                    math.floor(room_spacing * (x - (rooms_across - 1) / 2)) +
                    crawl.random_range(-offset_max, offset_max)
      local y_pos = gym / 2 +
                    math.floor(room_spacing * (y - (rooms_across - 1) / 2)) +
                    crawl.random_range(-offset_max, offset_max)
      local radius = crawl.random_range(radius_min, radius_max)

      -- we are only actually checking for vaults
      if (not find_in_area {x1 = x_pos - radius, y1 = y_pos - radius,
                            x2 = x_pos + radius, y2 = y_pos + radius,
                            find = "", find_vault = true }) then
        rooms_by_position[y][x] = geoelf.add_room(room_data,
                                                  x_pos, y_pos, radius)
      else
        rooms_by_position[y][x] = nil
      end
    end
  end

  -- add potential corridors
  for y = 0, rooms_across - 1 do
    for x = 0, rooms_across - 1 do
      if (rooms_by_position[y][x] ~= nil) then
        local index = rooms_by_position[y][x]

        -- east-west
        if (x >= 1 and rooms_by_position[y][x - 1] ~= nil) then
          local other_index = rooms_by_position[y][x - 1]
          geoelf.add_corridor(room_data, corridor_data,
                              other_index, index,
                              geoelf.directions.E, nil)
        end

        -- south-north
        if (y >= 1 and rooms_by_position[y - 1][x] ~= nil) then
          local other_index = rooms_by_position[y - 1][x]
          geoelf.add_corridor(room_data, corridor_data,
                              other_index, index,
                              geoelf.directions.S, nil)
        end

        -- southeast-northwest
        if (x >= 1 and y >= 1 and
            rooms_by_position[y - 1][x - 1] ~= nil) then
          local other_index = rooms_by_position[y - 1][x - 1]

          -- determine if there is another corridor that would
          --  block this one (i.e. an NE-SW one)
          local block_index = nil
          if (rooms_by_position[y][x - 1] ~= nil) then
            local old_index = rooms_by_position[y][x - 1]
            block_index = room_data[old_index].corridor[geoelf.directions.NE]
          end

          geoelf.add_corridor(room_data, corridor_data,
                              other_index, index,
                              geoelf.directions.SE, block_index)
        end

        -- southwest-northeast
        if (x + 1 < rooms_across and y >= 1 and
            rooms_by_position[y - 1][x + 1] ~= nil) then
          local other_index = rooms_by_position[y - 1][x + 1]
          geoelf.add_corridor(room_data, corridor_data,
                              other_index, index,
                              geoelf.directions.SW, nil)
        end
      end
    end
  end

  -- generate the layout
  geoelf.generate(_G, room_data, corridor_data, extra_corridor_fraction,
                  fancy_room_fraction, false, false)
}}
MAP
ENDMAP
